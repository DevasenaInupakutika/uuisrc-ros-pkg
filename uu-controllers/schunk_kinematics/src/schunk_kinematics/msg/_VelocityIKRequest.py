"""autogenerated by genmsg_py from VelocityIKRequest.msg. Do not edit."""
import roslib.message
import struct

import roslib.msg
import geometry_msgs.msg
import motion_planning_msgs.msg
import roslib.rostime
import sensor_msgs.msg

class VelocityIKRequest(roslib.message.Message):
  _md5sum = "facf8a45f952b874757dc2ae035fa257"
  _type = "schunk_kinematics/VelocityIKRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# A Velocity IK request message
# The name of the link for which we are computing IK
string ik_link_name

# The twist of the link
geometry_msgs/Twist twist

# Here specify the starting positions 
# of joints/links on the robot.
motion_planning_msgs/RobotState robot_state

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into it's linear and angular parts. 
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
================================================================================
MSG: motion_planning_msgs/RobotState
# This message contains information about the robot state, i.e. the positions of its joints and links
sensor_msgs/JointState joint_state
motion_planning_msgs/MultiDOFJointState multi_dof_joint_state
================================================================================
MSG: sensor_msgs/JointState
# This is a message that holds data to describe the state of a set of torque controlled joints. 
#
# The state of each joint (revolute or prismatic) is defined by:
#  * the position of the joint (rad or m),
#  * the velocity of the joint (rad/s or m/s) and 
#  * the effort that is applied in the joint (Nm or N).
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# effort associated with them, you can leave the effort array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.


Header header

string[] name
float64[] position
float64[] velocity
float64[] effort

================================================================================
MSG: roslib/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: motion_planning_msgs/MultiDOFJointState
#A representation of a multi-dof joint state
time stamp
string joint_name
string frame_id
string child_frame_id
geometry_msgs/Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['ik_link_name','twist','robot_state']
  _slot_types = ['string','geometry_msgs/Twist','motion_planning_msgs/RobotState']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       ik_link_name,twist,robot_state
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(VelocityIKRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ik_link_name is None:
        self.ik_link_name = ''
      if self.twist is None:
        self.twist = geometry_msgs.msg.Twist()
      if self.robot_state is None:
        self.robot_state = motion_planning_msgs.msg.RobotState()
    else:
      self.ik_link_name = ''
      self.twist = geometry_msgs.msg.Twist()
      self.robot_state = motion_planning_msgs.msg.RobotState()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self.ik_link_name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6d3I.pack(_x.twist.linear.x, _x.twist.linear.y, _x.twist.linear.z, _x.twist.angular.x, _x.twist.angular.y, _x.twist.angular.z, _x.robot_state.joint_state.header.seq, _x.robot_state.joint_state.header.stamp.secs, _x.robot_state.joint_state.header.stamp.nsecs))
      _x = self.robot_state.joint_state.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.robot_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot_state.joint_state.name:
        length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.robot_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.robot_state.joint_state.position))
      length = len(self.robot_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.robot_state.joint_state.velocity))
      length = len(self.robot_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.robot_state.joint_state.effort))
      _x = self
      buff.write(_struct_2I.pack(_x.robot_state.multi_dof_joint_state.stamp.secs, _x.robot_state.multi_dof_joint_state.stamp.nsecs))
      _x = self.robot_state.multi_dof_joint_state.joint_name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.robot_state.multi_dof_joint_state.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.robot_state.multi_dof_joint_state.child_frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.robot_state.multi_dof_joint_state.pose.position.x, _x.robot_state.multi_dof_joint_state.pose.position.y, _x.robot_state.multi_dof_joint_state.pose.position.z, _x.robot_state.multi_dof_joint_state.pose.orientation.x, _x.robot_state.multi_dof_joint_state.pose.orientation.y, _x.robot_state.multi_dof_joint_state.pose.orientation.z, _x.robot_state.multi_dof_joint_state.pose.orientation.w))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.twist is None:
        self.twist = geometry_msgs.msg.Twist()
      if self.robot_state is None:
        self.robot_state = motion_planning_msgs.msg.RobotState()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.ik_link_name = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.twist.linear.x, _x.twist.linear.y, _x.twist.linear.z, _x.twist.angular.x, _x.twist.angular.y, _x.twist.angular.z, _x.robot_state.joint_state.header.seq, _x.robot_state.joint_state.header.stamp.secs, _x.robot_state.joint_state.header.stamp.nsecs,) = _struct_6d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.robot_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot_state.joint_state.name = []
      for i in xrange(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1 = str[start:end]
        self.robot_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.robot_state.joint_state.position = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.robot_state.joint_state.velocity = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.robot_state.joint_state.effort = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 8
      (_x.robot_state.multi_dof_joint_state.stamp.secs, _x.robot_state.multi_dof_joint_state.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.robot_state.multi_dof_joint_state.joint_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.robot_state.multi_dof_joint_state.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.robot_state.multi_dof_joint_state.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.robot_state.multi_dof_joint_state.pose.position.x, _x.robot_state.multi_dof_joint_state.pose.position.y, _x.robot_state.multi_dof_joint_state.pose.position.z, _x.robot_state.multi_dof_joint_state.pose.orientation.x, _x.robot_state.multi_dof_joint_state.pose.orientation.y, _x.robot_state.multi_dof_joint_state.pose.orientation.z, _x.robot_state.multi_dof_joint_state.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self.ik_link_name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6d3I.pack(_x.twist.linear.x, _x.twist.linear.y, _x.twist.linear.z, _x.twist.angular.x, _x.twist.angular.y, _x.twist.angular.z, _x.robot_state.joint_state.header.seq, _x.robot_state.joint_state.header.stamp.secs, _x.robot_state.joint_state.header.stamp.nsecs))
      _x = self.robot_state.joint_state.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.robot_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot_state.joint_state.name:
        length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.robot_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.robot_state.joint_state.position.tostring())
      length = len(self.robot_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.robot_state.joint_state.velocity.tostring())
      length = len(self.robot_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.robot_state.joint_state.effort.tostring())
      _x = self
      buff.write(_struct_2I.pack(_x.robot_state.multi_dof_joint_state.stamp.secs, _x.robot_state.multi_dof_joint_state.stamp.nsecs))
      _x = self.robot_state.multi_dof_joint_state.joint_name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.robot_state.multi_dof_joint_state.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.robot_state.multi_dof_joint_state.child_frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.robot_state.multi_dof_joint_state.pose.position.x, _x.robot_state.multi_dof_joint_state.pose.position.y, _x.robot_state.multi_dof_joint_state.pose.position.z, _x.robot_state.multi_dof_joint_state.pose.orientation.x, _x.robot_state.multi_dof_joint_state.pose.orientation.y, _x.robot_state.multi_dof_joint_state.pose.orientation.z, _x.robot_state.multi_dof_joint_state.pose.orientation.w))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.twist is None:
        self.twist = geometry_msgs.msg.Twist()
      if self.robot_state is None:
        self.robot_state = motion_planning_msgs.msg.RobotState()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.ik_link_name = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.twist.linear.x, _x.twist.linear.y, _x.twist.linear.z, _x.twist.angular.x, _x.twist.angular.y, _x.twist.angular.z, _x.robot_state.joint_state.header.seq, _x.robot_state.joint_state.header.stamp.secs, _x.robot_state.joint_state.header.stamp.nsecs,) = _struct_6d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.robot_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot_state.joint_state.name = []
      for i in xrange(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1 = str[start:end]
        self.robot_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.robot_state.joint_state.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.robot_state.joint_state.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.robot_state.joint_state.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 8
      (_x.robot_state.multi_dof_joint_state.stamp.secs, _x.robot_state.multi_dof_joint_state.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.robot_state.multi_dof_joint_state.joint_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.robot_state.multi_dof_joint_state.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.robot_state.multi_dof_joint_state.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.robot_state.multi_dof_joint_state.pose.position.x, _x.robot_state.multi_dof_joint_state.pose.position.y, _x.robot_state.multi_dof_joint_state.pose.position.z, _x.robot_state.multi_dof_joint_state.pose.orientation.x, _x.robot_state.multi_dof_joint_state.pose.orientation.y, _x.robot_state.multi_dof_joint_state.pose.orientation.z, _x.robot_state.multi_dof_joint_state.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_7d = struct.Struct("<7d")
_struct_2I = struct.Struct("<2I")
_struct_6d3I = struct.Struct("<6d3I")
